import React, { useState } from "react";
import { toast } from "react-toastify";
import { DocumentDuplicateIcon } from "@heroicons/react/24/outline";

const ResultDisplay = ({ result, item_name}) => {
  const [activeTab, setActiveTab] = useState("vulnerabilities"); // Default tab: Vulnerabilities
  console.log(result);

  if (!result) return <p className="text-gray-400">Result Not available </p>;

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(result, null, 2)).then(() => {
      toast.success("Result copied", { position: "top-right", autoClose: 2000, theme: "light" });
    });
  };

  const renderResults = (results) => {
    // Handle array of results (legacy support for multi-repo)
    if (Array.isArray(results)) {
      return results.map((item, index) => (
        <div key={index} className="mb-4">
          <h3 className="text-lg font-semibold text-gray-100">{item.repo}</h3>
          {item.error ? (
            <p className="text-red-400">Error : {item.error}</p>
          ) : (
            renderSingleResult(item.data)
          )}
        </div>
      ));
    }

    // Handle single result from SelectedReposVulnerabilityScanner
    if (results.repo && results.data) {
      return (
        <div className="mb-4">
          <h3 className="text-lg font-semibold text-gray-100">{results.repo}</h3>
          {renderSingleResult(results.data)}
        </div>
      );
    }

    // Handle raw vulnerability scan result
    return renderSingleResult(results);
  };

  const renderSingleResult = (data) => {
    // Handle single file result
    if (data.file_path) {
      const groupedVulns = {
        [data.file_path]: data.vulnerabilities || [],
      };
      return renderGroupedResults({ vulnerabilities: data.vulnerabilities, files_scanned: [data.file_path] }, groupedVulns);
    }

    // Handle directory/repo result
    const results = data.results || data;
    if (!results.vulnerabilities && !results.summary) {
      return <p className="text-gray-400">No vulnerabilities found.</p>;
    }

    // Group vulnerabilities by file_path
    const groupedVulns = {};
    (results.vulnerabilities || []).forEach((vuln) => {
      const filePath = vuln.file_path || vuln.path;
      if (!groupedVulns[filePath]) {
        groupedVulns[filePath] = [];
      }
      groupedVulns[filePath].push(vuln);
    });

    return renderGroupedResults(results, groupedVulns);
  };

  const renderGroupedResults = (results, groupedVulns) => {
    // Extract repository name from repo_url
    const repoUrl = result?.repo_url;
    const ItemName = (repoUrl != null )? repoUrl.split("/").slice(-2).join("/")
        : (item_name ? item_name : "File");

    return (
      <div>
        {/* Repository Name */}
        {ItemName !== "File"  && <h3 className="text-lg font-semibold text-gray-100 mb-4">{ItemName}</h3>}

        {/* Summary */}
        <div className="mb-4">
          <p className="text-red-400">Vulnerabilities Found: {results.summary?.total || results.vulnerabilities?.length || 0}</p>
          {results.summary?.high && <p className="text-red-600">High Severity: {results.summary.high}</p>}
          {results.summary?.medium && <p className="text-yellow-500">Medium Severity: {results.summary.medium}</p>}
          {results.summary?.low && <p className="text-blue-400">Low Severity: {results.summary.low}</p>}
          {results.score !== undefined && <p className="text-gray-100">Security Score: {results.score}%</p>}
        </div>

        {/* Tabs */}
        <div className="mb-4">
          <div className="flex border-b border-gray-700">
            <button
              className={`px-4 py-2 font-semibold ${
                activeTab === "vulnerabilities" ? "border-b-2 border-red-500 text-red-400" : "text-gray-400"
              }`}
              onClick={() => setActiveTab("vulnerabilities")}
            >
              Vulnerabilities
            </button>
            <button
              className={`px-4 py-2 font-semibold ${
                activeTab === "recommendations" ? "border-b-2 border-red-500 text-red-400" : "text-gray-400"
              }`}
              onClick={() => setActiveTab("recommendations")}
            >
              Recommendations
            </button>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === "vulnerabilities" && (
          <div>
            {results.vulnerabilities?.length > 0 && (
              <div className="mb-4">
                <h4 className="text-gray-100 font-semibold">Found Vulnerabilities:</h4>
                {Object.entries(groupedVulns).map(([filePath, vulns]) => (
                  <div key={filePath} className="mt-4">
                    <h5 className="text-red-500 font-medium">----------------{filePath}----------------</h5>
                    <ul className="list-disc list-inside text-gray-300">
                      {vulns.map((vuln, idx) => (
                        <li key={idx}>
                          <span className="text-red-400">{vuln.rule_id || vuln.id}</span> - {vuln.message || vuln.title} 
                          {vuln.severity && <span className={`ml-2 px-2 py-1 rounded text-xs ${
                            vuln.severity === 'HIGH' ? 'bg-red-600' : 
                            vuln.severity === 'MEDIUM' ? 'bg-yellow-600' : 'bg-blue-600'
                          }`}>{vuln.severity}</span>}
                          {vuln.line && <span> (Line: {vuln.line})</span>}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {activeTab === "recommendations" && (
          <div>
            {results.vulnerabilities?.length > 0 ? (
              Object.entries(groupedVulns).map(([filePath, vulns]) => (
                <div key={filePath} className="mt-4">
                  <h5 className="text-red-700 font-medium">----------------{filePath}----------------</h5>
                  <ul className="list-disc list-inside text-gray-300">
                    {vulns.map((vuln, idx) => (
                      <li key={idx} className="mb-2">
                        <span className="text-red-400">{vuln.rule_id || vuln.id}</span> - {vuln.message || vuln.title}
                        <div className="text-slate-400 mt-1">
                          Recommendation: {vuln.fix || vuln.recommendation || "Review and fix this vulnerability"}
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              ))
            ) : (
              <p className="text-gray-400">No recommendations available.</p>
            )}
          </div>
        )}

        {/* Scanned Files */}
        {results.files_scanned?.length > 0 && (
          <div className="mt-4">
            <h4 className="text-gray-100 font-semibold">Files scanned:</h4>
            <ul className="list-disc list-inside text-gray-300">
              {results.files_scanned.map((file, idx) => (
                <li key={idx}>{file}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  };

  return (
      <div className="mt-6 w-full max-w-260 relative h-50">
        <label htmlFor="vulnerability-result" className="text-gray-400 text-sm mb-2 block">
          Vulnerability Scan Result:
        </label>
        <div
            className="p-4 bg-slate-800 text-red-300 rounded-lg shadow-inner max-h-96 overflow-y-auto font-mono text-sm">
          {renderResults(result)}
          <button
              onClick={handleCopy}
              className="absolute top-8 right-6 bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-600"
          >
            <DocumentDuplicateIcon className="h-4 w-4"/>
          </button>
        </div>

      </div>
  );
};

export default ResultDisplay;