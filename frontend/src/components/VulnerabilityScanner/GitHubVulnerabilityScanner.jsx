import React, { useState } from "react";
import { toast } from "react-toastify";
import { ShieldCheckIcon, ArrowPathIcon } from "@heroicons/react/24/outline";

const GitHubVulnerabilityScanner = ({ setResult, isLoading, url,setIsLoading, setUrl,userId }) => {
  // const [url, setUrl] = useState("");

  const scanVulnerabilities = async () => {
    if (!url || !url.includes("github.com")) {
      toast.warn(
        "Please enter a valid GitHub repository URL (e.g. https://github.com/user/repo)!",
        { position: "top-right", autoClose: 3000, theme: "light" }
      );
      return;
    }

    setIsLoading(true);
    try {
      const formData = new FormData();
      formData.append('input_type', 'repo');
      formData.append('repo_url', url);

      const response = await fetch("http://127.0.0.1:5000/semgrep", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Error during vulnerability scan");
      }

      const data = await response.json();
      setResult(data);
      toast.success("Vulnerability scan completed successfully", {
        position: "top-right",
        autoClose: 3000,
        theme: "light",
      });
    } catch (error) {
      toast.error(error.message || "Error during vulnerability scan", {
        position: "top-right",
        autoClose: 3000,
        theme: "light",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl">
      <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
        <ShieldCheckIcon className="h-7 w-7 text-red-400" />
        Vulnerability Scanner - GitHub Repository
      </h2>
      <div className="relative mb-6">
        <label htmlFor="github-url" className="text-gray-500 text-sm mb-2 block">
          GitHub Repository URL:
        </label>
        <input
          id="github-url"
          type="text"
          placeholder="GitHub URL (e.g. https://github.com/user/repo)"
          value={url}                  // <-- controlled input
          onChange={(e) => setUrl(e.target.value)} // <-- update state
          className="w-full pl-10 pr-4 py-3 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition duration-200 placeholder-gray-400"
        />
      </div>
      <button
        onClick={scanVulnerabilities}
        disabled={isLoading || !url}
        className={`w-full sm:w-auto bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors duration-200 flex items-center justify-center gap-2 ${
          isLoading || !url ? "opacity-50 cursor-not-allowed" : ""
        }`}
      >
        {isLoading ? (
          <>
            <ArrowPathIcon className="h-5 w-5 animate-spin" />
            Scanning...
          </>
        ) : (
          <>
            <ShieldCheckIcon className="h-5 w-5" />
            Scan Vulnerabilities
          </>
        )}
      </button>
    </div>
  );
};

export default GitHubVulnerabilityScanner;
