name: CI

on:
  push:
    branches: [ main ]          # after merges
  pull_request:
    branches: [ main ]          # PRs into main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Secrets scan ----------
  secrets:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0              # ensure previous commit exists for diffs
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ---------- Backend (Python) ----------
  backend:
    name: Backend (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect backend presence
        id: detect_backend
        shell: bash
        run: |
          if ls -1 backend/*.py backend/**/*.py requirements.txt >/dev/null 2>&1; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Python
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest pip-audit

      - name: Lint (ruff)
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        working-directory: backend
        run: ruff check .

      - name: Syntax check
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        run: python -m py_compile $(git ls-files 'backend/**/*.py' 'backend/*.py' || true)

      - name: Unit tests (if any)
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        run: |
          if [ -d "tests" ] || ls -1 backend | grep -qi "test"; then
            pytest -q
          else
            echo "No tests found — skipping."
          fi

      - name: Dependency vulnerabilities (pip-audit)
        if: ${{ steps.detect_backend.outputs.present == 'true' }}
        run: pip-audit --requirement requirements.txt || true   # make blocking later

  # ---------- Frontend (Node) ----------
  frontend:
    name: Frontend (Node)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect frontend presence
        id: detect_frontend
        shell: bash
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        if: ${{ steps.detect_frontend.outputs.present == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        if: ${{ steps.detect_frontend.outputs.present == 'true' }}
        working-directory: frontend
        run: npm ci

      - name: Lint (if script exists)
        if: ${{ steps.detect_frontend.outputs.present == 'true' }}
        working-directory: frontend
        run: npm run -s lint || echo "No lint script — skipping."

      - name: Tests (if script exists)
        if: ${{ steps.detect_frontend.outputs.present == 'true' }}
        working-directory: frontend
        run: npm test --if-present || echo "No tests — skipping."

      - name: Build (ensures it compiles)
        if: ${{ steps.detect_frontend.outputs.present == 'true' }}
        working-directory: frontend
        run: npm run -s build || echo "No build step — skipping."

  # ---------- Semgrep SAST (security) ----------
  semgrep:
    name: Semgrep (SAST)
    runs-on: ubuntu-latest
    needs: [secrets, backend, frontend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Semgrep (CI ruleset)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci            # solid default ruleset for PRs
          generateSarif: true
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # ---------- SonarCloud (quality gate, duplication, trends) ----------
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [semgrep]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0               # better blame/PR decoration

      - name: Set up Java (required by scanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: 5b0392f2bf515c989e72e6f89803afaeeb03e5f5
        # auto-reads sonar-project.properties at repo root

  # ---------- Final gate ----------
  status:
    name: Status Gate
    runs-on: ubuntu-latest
    needs: [secrets, backend, frontend, semgrep, sonarcloud]
    steps:
      - run: echo "All required jobs finished."
